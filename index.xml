<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员说事儿</title>
    <link>https://hugoit.github.io/</link>
    <description>Recent content on 程序员说事儿</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 05 Aug 2019 13:05:30 +0800</lastBuildDate>
    
	<atom:link href="https://hugoit.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Code-in with OpenWISP</title>
      <link>https://hugoit.github.io/posts/gci/</link>
      <pubDate>Sat, 13 Jan 2018 10:29:23 +0530</pubDate>
      
      <guid>https://hugoit.github.io/posts/gci/</guid>
      <description>Recently I&amp;rsquo;ve been participating in Google Code-in which is Google&amp;rsquo;s initiative to introduce young minds to the concept of FOSS, that is Free or Open-Source Softwares. This post is for sharing my experiences with GCI, as the title suggests. So let&amp;rsquo;s just get on it.
It all began while I was returning from an outing on 5 December, 2017 and was searching the internet for Google Science Fair to check if I could participate in it or not.</description>
    </item>
    
    <item>
      <title>My_first_blog</title>
      <link>https://hugoit.github.io/posts/my_first_blog/</link>
      <pubDate>Mon, 05 Aug 2019 13:05:30 +0800</pubDate>
      
      <guid>https://hugoit.github.io/posts/my_first_blog/</guid>
      <description></description>
    </item>
    
    <item>
      <title>谈谈Java中==和equals到底有啥区别</title>
      <link>https://hugoit.github.io/posts/%E8%B0%88%E8%B0%88java%E4%B8%AD%E5%92%8Cequals%E5%88%B0%E5%BA%95%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://hugoit.github.io/posts/%E8%B0%88%E8%B0%88java%E4%B8%AD%E5%92%8Cequals%E5%88%B0%E5%BA%95%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB/</guid>
      <description>之前在IDEA中引入了阿里巴巴的Java规范插件，自动检测了一下开发中的项目，发现很多“不规范”的“常规”代码。然而，往往被我们忽视的常见代码，会隐藏着不规范的漏洞。
相信刚入职的Java开发者都遇到过这样的面试题：“说一下Java中==和equals的区别”。
我们先来复习一下，Java中的基本数据类型
Java中基本数据类型 上述Java中八种基本数据类型，对应的包装类型分别为：Boolean、Byte、Character、Short、Integer、Long、Float、Double。 将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据。
包装类之间相等判断  包装类型间的相等判断应该用equals，而不是“==”；  原因分析： &amp;gt;包装类型间的相等判断应该用equals，而不是&amp;rsquo;==&amp;lsquo;。  说明：对于Integer var=?在-128至127之间的赋值，Integer对象是在IntegerCache.cache产生，会复用已有对象，这个区间内的Integer值可以直接使用==进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用equals方法进行判断。 + 示例：
public class EqualsTest { public static void main(String[] args) { Integer a0 = 256; Integer b0 = 256; // 结果输出false：包装类型的相等比较应该用equals // Integer范围：-128~127 System.out.println(a0==b0); Integer a1 = -128; Integer b1 = -128; // 结果输出true：包装类型的相等比较应该用equals // Integer范围：-128~127 System.out.println(a1==b1); } }   分析：  上述定义变量a0、b0等，实际体现在Integer源码中是调用valueOf(int i)方法
public static Integer valueOf(int i) { if (i &amp;gt;= IntegerCache.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://hugoit.github.io/posts/hugoisforlovers/</link>
      <pubDate>Sun, 28 Jan 2018 18:59:43 +0530</pubDate>
      
      <guid>https://hugoit.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://hugoit.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hugoit.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://hugoit.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hugoit.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Migrating from Jekyll</title>
      <link>https://hugoit.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hugoit.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>